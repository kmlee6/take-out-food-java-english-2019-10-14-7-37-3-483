import java.util.List;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import static java.lang.Math.min;
import static java.lang.String.format;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private ItemRepository itemRepository;
    private SalesPromotionRepository salesPromotionRepository;

    public App(ItemRepository itemRepository, SalesPromotionRepository salesPromotionRepository) {
        this.itemRepository = itemRepository;
        this.salesPromotionRepository = salesPromotionRepository;
    }

    public String bestCharge(List<String> inputs) {
        List<Item> selected_item_list = new ArrayList<>();
        List<Integer> selected_item_amount = new ArrayList<>();
        double marked_price;
        HashMap<String, Double> payment_options = new HashMap<>();

        for(String input_item : inputs){
            String[] input_split = input_item.split(" x ");

            List<Item> matched_items = this.itemRepository.findAll().stream()
                                            .filter(item -> item.getId().equals(input_split[0]))
                                            .collect(Collectors.toList());
            if(matched_items.size()>0){
                selected_item_list.add(matched_items.get(0));
                selected_item_amount.add(Integer.parseInt(input_split[1]));
            }
        }

        marked_price = Stream.iterate(0, i -> i+1)
                            .limit(min(selected_item_list.size(), selected_item_amount.size()))
                            .mapToDouble(i -> selected_item_list.get(i).getPrice()*selected_item_amount.get(i).intValue())
                            .sum();

        for(SalesPromotion promotion:this.salesPromotionRepository.findAll()){
            String promotion_name = "";
            double price = marked_price;

            if(promotion.getType().equals("BUY_30_SAVE_6_YUAN")){
                promotion_name = promotion.getDisplayName();
                price = marked_price>=30 ? marked_price-6 : marked_price;
            }
            if(promotion.getType().equals("50%_DISCOUNT_ON_SPECIFIED_ITEMS")){
                promotion_name = promotion.getDisplayName() + " ("
                                        + selected_item_list.stream()
                                        .filter(item -> promotion.getRelatedItems().contains(item.getId()))
                                        .map(Item::getName)
                                        .collect(Collectors.joining(", ")) + ")";
                List<Double> discount = selected_item_list.stream()
                                                .mapToDouble(item -> promotion.getRelatedItems().contains(item.getId())? 0.5 : 1)
                                                .boxed()
                                                .collect(Collectors.toList());
                price = Stream.iterate(0, n->n+1)
                                .limit(min(selected_item_list.size(), selected_item_amount.size()))
                                .mapToDouble(i -> selected_item_list.get(i).getPrice()*selected_item_amount.get(i).intValue()*discount.get(i))
                                .sum();
            }
            payment_options.put(promotion_name, price);
        }

        Map.Entry<String, Double> selected_promotion = null;
        for (Map.Entry<String, Double> entry : payment_options.entrySet()) {
            if (selected_promotion == null || selected_promotion.getValue() > entry.getValue()) {
                selected_promotion = entry;
            }
        }

        String receiptString = "============= Order details =============\n";
        receiptString += Stream.iterate(0, n->n+1)
                                .limit(min(selected_item_list.size(), selected_item_amount.size()))
                                .map(i -> selected_item_list.get(i).getName() + " x " + selected_item_amount.get(i) + " = " + selected_item_list.get(i).getPrice()*selected_item_amount.get(i) + " yuan")
                                .collect(Collectors.joining("\n"));
        receiptString += format("\n-----------------------------------\nPromotion used:\n%s, saving %.02f yuan.\n-----------------------------------\nTotalï¼š%.02f yuan\n===================================\n"
                            , selected_promotion.getKey()
                            , marked_price-selected_promotion.getValue()
                            , selected_promotion.getValue());

        return receiptString;
    }
}
